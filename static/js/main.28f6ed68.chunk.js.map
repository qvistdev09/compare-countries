{"version":3,"sources":["CountryCodes.js","components/Header.js","components/Country.js","components/InputField.js","components/SuggestedCountries.js","App.js","serviceWorker.js","index.js"],"names":["shortened","fullName","Header","props","className","classes","title","description","Country","name","population","capital","src","flag","alt","onClick","delete","alpha2Code","InputField","id","type","placeholder","onChange","value","input","SuggestedCountries","suggestions","length","slice","map","item","key","add","App","state","message","cached","selectedCountries","fetchCountry","bind","getSuggestions","deleteCountry","code","this","some","country","setState","filter","console","log","string","indexOf","fetch","then","response","json","data","catch","error","event","target","regex","RegExp","test","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAAMA,G,YAAY,CAChf,cACA,mBACA,UACA,UACA,iBACA,UACA,SACA,WACA,aACA,sBACA,YACA,UACA,QACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,UACA,SACA,mCACA,mCACA,yBACA,WACA,gBACA,SACA,iCACA,oBACA,WACA,eACA,UACA,aACA,WACA,WACA,SACA,iBACA,2BACA,OACA,QACA,QACA,mBACA,0BACA,WACA,UACA,QACA,oCACA,eACA,aACA,mBACA,UACA,OACA,aACA,SACA,UACA,UACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,WACA,8BACA,gBACA,OACA,UACA,SACA,gBACA,mBACA,8BACA,QACA,SACA,UACA,UACA,QACA,YACA,SACA,YACA,UACA,aACA,OACA,YACA,WACA,SACA,gBACA,SACA,QACA,oCACA,WACA,WACA,YACA,UACA,UACA,QACA,YACA,6BACA,OACA,UACA,cACA,SACA,QACA,UACA,QACA,SACA,SACA,aACA,QACA,WACA,0CACA,qBACA,SACA,aACA,mCACA,SACA,UACA,UACA,UACA,QACA,gBACA,YACA,aACA,QACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,aACA,YACA,UACA,SACA,mCACA,uBACA,SACA,WACA,aACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,gBACA,cACA,YACA,QACA,UACA,OACA,iBACA,kBACA,2BACA,SACA,OACA,WACA,QACA,sBACA,SACA,mBACA,WACA,OACA,cACA,WACA,SACA,WACA,cACA,QACA,aACA,UACA,qBACA,SACA,sBACA,+CACA,wBACA,cACA,6BACA,4BACA,mCACA,QACA,aACA,wBACA,eACA,UACA,SACA,aACA,eACA,YACA,4BACA,WACA,WACA,kBACA,UACA,eACA,+CACA,cACA,QACA,YACA,QACA,WACA,yBACA,SACA,cACA,uBACA,4BACA,aACA,+BACA,WACA,cACA,OACA,UACA,QACA,sB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","file":"static/js/main.28f6ed68.chunk.js","sourcesContent":["const shortened = [\r\n  'AF',\r\n  'AX',\r\n  'AL',\r\n  'DZ',\r\n  'AS',\r\n  'AD',\r\n  'AO',\r\n  'AI',\r\n  'AQ',\r\n  'AG',\r\n  'AR',\r\n  'AM',\r\n  'AW',\r\n  'AU',\r\n  'AT',\r\n  'AZ',\r\n  'BS',\r\n  'BH',\r\n  'BD',\r\n  'BB',\r\n  'BY',\r\n  'BE',\r\n  'BZ',\r\n  'BJ',\r\n  'BM',\r\n  'BT',\r\n  'BO',\r\n  'BQ',\r\n  'BA',\r\n  'BW',\r\n  'BV',\r\n  'BR',\r\n  'IO',\r\n  'BN',\r\n  'BG',\r\n  'BF',\r\n  'BI',\r\n  'CV',\r\n  'KH',\r\n  'CM',\r\n  'CA',\r\n  'KY',\r\n  'CF',\r\n  'TD',\r\n  'CL',\r\n  'CN',\r\n  'CX',\r\n  'CC',\r\n  'CO',\r\n  'KM',\r\n  'CG',\r\n  'CD',\r\n  'CK',\r\n  'CR',\r\n  'CI',\r\n  'HR',\r\n  'CU',\r\n  'CW',\r\n  'CY',\r\n  'CZ',\r\n  'DK',\r\n  'DJ',\r\n  'DM',\r\n  'DO',\r\n  'EC',\r\n  'EG',\r\n  'SV',\r\n  'GQ',\r\n  'ER',\r\n  'EE',\r\n  'SZ',\r\n  'ET',\r\n  'FK',\r\n  'FO',\r\n  'FJ',\r\n  'FI',\r\n  'FR',\r\n  'GF',\r\n  'PF',\r\n  'TF',\r\n  'GA',\r\n  'GM',\r\n  'GE',\r\n  'DE',\r\n  'GH',\r\n  'GI',\r\n  'GR',\r\n  'GL',\r\n  'GD',\r\n  'GP',\r\n  'GU',\r\n  'GT',\r\n  'GG',\r\n  'GN',\r\n  'GW',\r\n  'GY',\r\n  'HT',\r\n  'HM',\r\n  'VA',\r\n  'HN',\r\n  'HK',\r\n  'HU',\r\n  'IS',\r\n  'IN',\r\n  'ID',\r\n  'IR',\r\n  'IQ',\r\n  'IE',\r\n  'IM',\r\n  'IL',\r\n  'IT',\r\n  'JM',\r\n  'JP',\r\n  'JE',\r\n  'JO',\r\n  'KZ',\r\n  'KE',\r\n  'KI',\r\n  'KP',\r\n  'KR',\r\n  'KW',\r\n  'KG',\r\n  'LA',\r\n  'LV',\r\n  'LB',\r\n  'LS',\r\n  'LR',\r\n  'LY',\r\n  'LI',\r\n  'LT',\r\n  'LU',\r\n  'MO',\r\n  'MG',\r\n  'MW',\r\n  'MY',\r\n  'MV',\r\n  'ML',\r\n  'MT',\r\n  'MH',\r\n  'MQ',\r\n  'MR',\r\n  'MU',\r\n  'YT',\r\n  'MX',\r\n  'FM',\r\n  'MD',\r\n  'MC',\r\n  'MN',\r\n  'ME',\r\n  'MS',\r\n  'MA',\r\n  'MZ',\r\n  'MM',\r\n  'NA',\r\n  'NR',\r\n  'NP',\r\n  'NL',\r\n  'NC',\r\n  'NZ',\r\n  'NI',\r\n  'NE',\r\n  'NG',\r\n  'NU',\r\n  'NF',\r\n  'MK',\r\n  'MP',\r\n  'NO',\r\n  'OM',\r\n  'PK',\r\n  'PW',\r\n  'PS',\r\n  'PA',\r\n  'PG',\r\n  'PY',\r\n  'PE',\r\n  'PH',\r\n  'PN',\r\n  'PL',\r\n  'PT',\r\n  'PR',\r\n  'QA',\r\n  'RE',\r\n  'RO',\r\n  'RU',\r\n  'RW',\r\n  'BL',\r\n  'SH',\r\n  'KN',\r\n  'LC',\r\n  'MF',\r\n  'PM',\r\n  'VC',\r\n  'WS',\r\n  'SM',\r\n  'ST',\r\n  'SA',\r\n  'SN',\r\n  'RS',\r\n  'SC',\r\n  'SL',\r\n  'SG',\r\n  'SX',\r\n  'SK',\r\n  'SI',\r\n  'SB',\r\n  'SO',\r\n  'ZA',\r\n  'GS',\r\n  'SS',\r\n  'ES',\r\n  'LK',\r\n  'SD',\r\n  'SR',\r\n  'SJ',\r\n  'SE',\r\n  'CH',\r\n  'SY',\r\n  'TW',\r\n  'TJ',\r\n  'TZ',\r\n  'TH',\r\n  'TL',\r\n  'TG',\r\n  'TK',\r\n  'TO',\r\n  'TT',\r\n  'TN',\r\n  'TR',\r\n  'TM',\r\n  'TC',\r\n  'TV',\r\n  'UG',\r\n  'UA',\r\n  'AE',\r\n  'GB',\r\n  'UM',\r\n  'US',\r\n  'UY',\r\n  'UZ',\r\n  'VU',\r\n  'VE',\r\n  'VN',\r\n  'VG',\r\n  'VI',\r\n  'WF',\r\n  'EH',\r\n  'YE',\r\n  'ZM',\r\n  'ZW',\r\n];\r\n\r\nconst fullName = [\r\n  'Afghanistan',\r\n  'Ã…land Islands',\r\n  'Albania',\r\n  'Algeria',\r\n  'American Samoa',\r\n  'Andorra',\r\n  'Angola',\r\n  'Anguilla',\r\n  'Antarctica',\r\n  'Antigua and Barbuda',\r\n  'Argentina',\r\n  'Armenia',\r\n  'Aruba',\r\n  'Australia',\r\n  'Austria',\r\n  'Azerbaijan',\r\n  'Bahamas',\r\n  'Bahrain',\r\n  'Bangladesh',\r\n  'Barbados',\r\n  'Belarus',\r\n  'Belgium',\r\n  'Belize',\r\n  'Benin',\r\n  'Bermuda',\r\n  'Bhutan',\r\n  'Bolivia (Plurinational State of)',\r\n  'Bonaire, Sint Eustatius and Saba',\r\n  'Bosnia and Herzegovina',\r\n  'Botswana',\r\n  'Bouvet Island',\r\n  'Brazil',\r\n  'British Indian Ocean Territory',\r\n  'Brunei Darussalam',\r\n  'Bulgaria',\r\n  'Burkina Faso',\r\n  'Burundi',\r\n  'Cabo Verde',\r\n  'Cambodia',\r\n  'Cameroon',\r\n  'Canada',\r\n  'Cayman Islands',\r\n  'Central African Republic',\r\n  'Chad',\r\n  'Chile',\r\n  'China',\r\n  'Christmas Island',\r\n  'Cocos (Keeling) Islands',\r\n  'Colombia',\r\n  'Comoros',\r\n  'Congo',\r\n  'Congo, Democratic Republic of the',\r\n  'Cook Islands',\r\n  'Costa Rica',\r\n  \"CÃ´te d'Ivoire\",\r\n  'Croatia',\r\n  'Cuba',\r\n  'CuraÃ§ao',\r\n  'Cyprus',\r\n  'Czechia',\r\n  'Denmark',\r\n  'Djibouti',\r\n  'Dominica',\r\n  'Dominican Republic',\r\n  'Ecuador',\r\n  'Egypt',\r\n  'El Salvador',\r\n  'Equatorial Guinea',\r\n  'Eritrea',\r\n  'Estonia',\r\n  'Eswatini',\r\n  'Ethiopia',\r\n  'Falkland Islands (Malvinas)',\r\n  'Faroe Islands',\r\n  'Fiji',\r\n  'Finland',\r\n  'France',\r\n  'French Guiana',\r\n  'French Polynesia',\r\n  'French Southern Territories',\r\n  'Gabon',\r\n  'Gambia',\r\n  'Georgia',\r\n  'Germany',\r\n  'Ghana',\r\n  'Gibraltar',\r\n  'Greece',\r\n  'Greenland',\r\n  'Grenada',\r\n  'Guadeloupe',\r\n  'Guam',\r\n  'Guatemala',\r\n  'Guernsey',\r\n  'Guinea',\r\n  'Guinea-Bissau',\r\n  'Guyana',\r\n  'Haiti',\r\n  'Heard Island and McDonald Islands',\r\n  'Holy See',\r\n  'Honduras',\r\n  'Hong Kong',\r\n  'Hungary',\r\n  'Iceland',\r\n  'India',\r\n  'Indonesia',\r\n  'Iran (Islamic Republic of)',\r\n  'Iraq',\r\n  'Ireland',\r\n  'Isle of Man',\r\n  'Israel',\r\n  'Italy',\r\n  'Jamaica',\r\n  'Japan',\r\n  'Jersey',\r\n  'Jordan',\r\n  'Kazakhstan',\r\n  'Kenya',\r\n  'Kiribati',\r\n  \"Korea (Democratic People's Republic of)\",\r\n  'Korea, Republic of',\r\n  'Kuwait',\r\n  'Kyrgyzstan',\r\n  \"Lao People's Democratic Republic\",\r\n  'Latvia',\r\n  'Lebanon',\r\n  'Lesotho',\r\n  'Liberia',\r\n  'Libya',\r\n  'Liechtenstein',\r\n  'Lithuania',\r\n  'Luxembourg',\r\n  'Macao',\r\n  'Madagascar',\r\n  'Malawi',\r\n  'Malaysia',\r\n  'Maldives',\r\n  'Mali',\r\n  'Malta',\r\n  'Marshall Islands',\r\n  'Martinique',\r\n  'Mauritania',\r\n  'Mauritius',\r\n  'Mayotte',\r\n  'Mexico',\r\n  'Micronesia (Federated States of)',\r\n  'Moldova, Republic of',\r\n  'Monaco',\r\n  'Mongolia',\r\n  'Montenegro',\r\n  'Montserrat',\r\n  'Morocco',\r\n  'Mozambique',\r\n  'Myanmar',\r\n  'Namibia',\r\n  'Nauru',\r\n  'Nepal',\r\n  'Netherlands',\r\n  'New Caledonia',\r\n  'New Zealand',\r\n  'Nicaragua',\r\n  'Niger',\r\n  'Nigeria',\r\n  'Niue',\r\n  'Norfolk Island',\r\n  'North Macedonia',\r\n  'Northern Mariana Islands',\r\n  'Norway',\r\n  'Oman',\r\n  'Pakistan',\r\n  'Palau',\r\n  'Palestine, State of',\r\n  'Panama',\r\n  'Papua New Guinea',\r\n  'Paraguay',\r\n  'Peru',\r\n  'Philippines',\r\n  'Pitcairn',\r\n  'Poland',\r\n  'Portugal',\r\n  'Puerto Rico',\r\n  'Qatar',\r\n  'RÃ©union',\r\n  'Romania',\r\n  'Russian Federation',\r\n  'Rwanda',\r\n  'Saint BarthÃ©lemy',\r\n  'Saint Helena, Ascension and Tristan da Cunha',\r\n  'Saint Kitts and Nevis',\r\n  'Saint Lucia',\r\n  'Saint Martin (French part)',\r\n  'Saint Pierre and Miquelon',\r\n  'Saint Vincent and the Grenadines',\r\n  'Samoa',\r\n  'San Marino',\r\n  'Sao Tome and Principe',\r\n  'Saudi Arabia',\r\n  'Senegal',\r\n  'Serbia',\r\n  'Seychelles',\r\n  'Sierra Leone',\r\n  'Singapore',\r\n  'Sint Maarten (Dutch part)',\r\n  'Slovakia',\r\n  'Slovenia',\r\n  'Solomon Islands',\r\n  'Somalia',\r\n  'South Africa',\r\n  'South Georgia and the South Sandwich Islands',\r\n  'South Sudan',\r\n  'Spain',\r\n  'Sri Lanka',\r\n  'Sudan',\r\n  'Suriname',\r\n  'Svalbard and Jan Mayen',\r\n  'Sweden',\r\n  'Switzerland',\r\n  'Syrian Arab Republic',\r\n  'Taiwan, Province of China',\r\n  'Tajikistan',\r\n  'Tanzania, United Republic of',\r\n  'Thailand',\r\n  'Timor-Leste',\r\n  'Togo',\r\n  'Tokelau',\r\n  'Tonga',\r\n  'Trinidad and Tobago',\r\n  'Tunisia',\r\n  'Turkey',\r\n  'Turkmenistan',\r\n  'Turks and Caicos Islands',\r\n  'Tuvalu',\r\n  'Uganda',\r\n  'Ukraine',\r\n  'United Arab Emirates',\r\n  'United Kingdom of Great Britain and Northern Ireland',\r\n  'United States Minor Outlying Islands',\r\n  'United States of America',\r\n  'Uruguay',\r\n  'Uzbekistan',\r\n  'Vanuatu',\r\n  'Venezuela (Bolivarian Republic of)',\r\n  'Viet Nam',\r\n  'Virgin Islands (British)',\r\n  'Virgin Islands (U.S.)',\r\n  'Wallis and Futuna',\r\n  'Western Sahara',\r\n  'Yemen',\r\n  'Zambia',\r\n  'Zimbabwe',\r\n];\r\n\r\nexport { shortened, fullName };\r\n","import React from 'react';\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header className={props.classes}>\r\n      <h1 className=\"m-bottom-small\">{props.title}</h1>\r\n      <p>{props.description}</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction Country(props) {\r\n  return (\r\n    <div className=\"country-container m-bottom p-small\">\r\n      <p>Name: {props.name}</p>\r\n      <p>Population: {props.population}</p>\r\n      <p>Capital: {props.capital}</p>\r\n      <img src={props.flag} alt=\"flag\" />\r\n      <button onClick={() => props.delete(props.alpha2Code)}>Delete</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Country;\r\n","import React from 'react';\r\n\r\nfunction InputField(props) {\r\n  return (\r\n    <input\r\n      id=\"search-field\"\r\n      type=\"text\"\r\n      className={props.classes}\r\n      placeholder=\"Type to add country\"\r\n      onChange={props.onChange}\r\n      value={props.input}\r\n    />\r\n  );\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nfunction SuggestedCountries(props) {\r\n  return (\r\n    <div\r\n      id=\"suggestions-container\"\r\n      className={props.suggestions.length === 0 ? 'hidden' : props.classes}\r\n    >\r\n      {props.suggestions.slice(0, 4).map((item) => (\r\n        <div className=\"flex-row justify-between\" key={item}>\r\n          <p>{item}</p>\r\n          <button onClick={() => props.add(item)}><i className=\"fas fa-plus\"></i></button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SuggestedCountries;\r\n","import React from 'react';\nimport './css/utilities.css';\nimport './css/style.css';\nimport { shortened, fullName } from './CountryCodes';\n\nimport Header from './components/Header';\nimport Country from './components/Country';\nimport InputField from './components/InputField';\nimport SuggestedCountries from './components/SuggestedCountries';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: 'No message loaded',\n      input: '',\n      suggestions: [],\n      cached: [],\n      selectedCountries: [],\n    };\n\n    this.fetchCountry = this.fetchCountry.bind(this);\n    this.getSuggestions = this.getSuggestions.bind(this);\n    this.deleteCountry = this.deleteCountry.bind(this);\n  }\n\n  deleteCountry(code) {\n    // check if country should be cached\n    if (!this.state.cached.some((country) => country.alpha2Code === code)) {\n      this.setState(\n        (state, props) => ({\n          cached: [\n            ...state.cached,\n            ...state.selectedCountries.filter(\n              (country) => country.alpha2Code === code\n            ),\n          ],\n          selectedCountries: state.selectedCountries.filter(\n            (country) => country.alpha2Code !== code\n          ),\n        }),\n        () => console.log(this.state.cached)\n      );\n    }\n    // if already cached, just delete\n    else {\n      this.setState(\n        (state, props) => ({\n          selectedCountries: state.selectedCountries.filter(\n            (country) => country.alpha2Code !== code\n          ),\n        }),\n        () => console.log(this.state.cached)\n      );\n    }\n  }\n\n  fetchCountry(string) {\n    const code = shortened[fullName.indexOf(string)];\n    // check if country is already selected\n    if (\n      this.state.selectedCountries.some(\n        (country) => country.alpha2Code === code\n      )\n    ) {\n      console.log('Country already selected');\n      return;\n    }\n\n    // check if country can be retrieved from cache of already viewed countries\n    if (this.state.cached.some((country) => country.alpha2Code === code)) {\n      this.setState(\n        (state, props) => ({\n          selectedCountries: [\n            ...state.selectedCountries,\n            ...state.cached.filter((country) => country.alpha2Code === code),\n          ],\n          suggestions: [],\n          input: '',\n        }),\n        () => console.log('Country collected from cache, no API call needed')\n      );\n    }\n    // fetch previously unviewed country from API\n    else {\n      fetch('https://restcountries.eu/rest/v2/alpha/' + code)\n        .then((response) => response.json())\n        .then((data) => {\n          this.setState(\n            (state, props) => ({\n              selectedCountries: [\n                ...state.selectedCountries,\n                {\n                  ...data,\n                },\n              ],\n              suggestions: [],\n              input: '',\n            }),\n            () => console.log('An API call was made')\n          );\n        })\n        .catch((error) => console.log('Could not get data'));\n    }\n  }\n\n  getSuggestions(event) {\n    this.setState({ input: event.target.value }, () => {\n      if (this.state.input === '') {\n        this.setState({ suggestions: [] });\n        return;\n      }\n      const regex = RegExp('^' + this.state.input, 'i');\n      this.setState({\n        suggestions: fullName.filter((item) => regex.test(item)),\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"site-container\" className=\"p\">\n        <Header\n          classes=\"m-bottom\"\n          title=\"Compare Countries\"\n          description=\"by qvistdev09, using REST countries API\"\n        />\n        <div id=\"input-area\" className=\"m-bottom\">\n          <InputField onChange={this.getSuggestions} input={this.state.input} />\n          <SuggestedCountries\n            classes=\"flex-column\"\n            suggestions={this.state.suggestions}\n            add={this.fetchCountry}\n          />\n        </div>\n        {this.state.selectedCountries.map((country) => (\n          <Country\n            {...country}\n            key={country.name}\n            delete={this.deleteCountry}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}